// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.5.1
// source: pb/airHockey.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*GameMessage_PlayerInput
	//	*GameMessage_EntityState
	//	*GameMessage_GameState
	//	*GameMessage_Empty
	Action isGameMessage_Action `protobuf_oneof:"action"`
	Sender string               `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (x *GameMessage) Reset() {
	*x = GameMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage) ProtoMessage() {}

func (x *GameMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage.ProtoReflect.Descriptor instead.
func (*GameMessage) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{0}
}

func (m *GameMessage) GetAction() isGameMessage_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *GameMessage) GetPlayerInput() *PlayerInput {
	if x, ok := x.GetAction().(*GameMessage_PlayerInput); ok {
		return x.PlayerInput
	}
	return nil
}

func (x *GameMessage) GetEntityState() *EntityState {
	if x, ok := x.GetAction().(*GameMessage_EntityState); ok {
		return x.EntityState
	}
	return nil
}

func (x *GameMessage) GetGameState() *GameState {
	if x, ok := x.GetAction().(*GameMessage_GameState); ok {
		return x.GameState
	}
	return nil
}

func (x *GameMessage) GetEmpty() *Empty {
	if x, ok := x.GetAction().(*GameMessage_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *GameMessage) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

type isGameMessage_Action interface {
	isGameMessage_Action()
}

type GameMessage_PlayerInput struct {
	PlayerInput *PlayerInput `protobuf:"bytes,1,opt,name=playerInput,proto3,oneof"`
}

type GameMessage_EntityState struct {
	EntityState *EntityState `protobuf:"bytes,2,opt,name=entityState,proto3,oneof"`
}

type GameMessage_GameState struct {
	GameState *GameState `protobuf:"bytes,3,opt,name=gameState,proto3,oneof"`
}

type GameMessage_Empty struct {
	Empty *Empty `protobuf:"bytes,4,opt,name=empty,proto3,oneof"`
}

func (*GameMessage_PlayerInput) isGameMessage_Action() {}

func (*GameMessage_EntityState) isGameMessage_Action() {}

func (*GameMessage_GameState) isGameMessage_Action() {}

func (*GameMessage_Empty) isGameMessage_Action() {}

type PlayerInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction *Direction `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`
	Sender    string     `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	RoomID    string     `protobuf:"bytes,3,opt,name=roomID,proto3" json:"roomID,omitempty"`
}

func (x *PlayerInput) Reset() {
	*x = PlayerInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInput) ProtoMessage() {}

func (x *PlayerInput) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInput.ProtoReflect.Descriptor instead.
func (*PlayerInput) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerInput) GetDirection() *Direction {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *PlayerInput) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *PlayerInput) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

type EntityState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*ObjectState `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Puck    *ObjectState   `protobuf:"bytes,2,opt,name=puck,proto3" json:"puck,omitempty"`
	Sender  string         `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	RoomID  string         `protobuf:"bytes,4,opt,name=RoomID,proto3" json:"RoomID,omitempty"`
}

func (x *EntityState) Reset() {
	*x = EntityState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityState) ProtoMessage() {}

func (x *EntityState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityState.ProtoReflect.Descriptor instead.
func (*EntityState) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{2}
}

func (x *EntityState) GetPlayers() []*ObjectState {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *EntityState) GetPuck() *ObjectState {
	if x != nil {
		return x.Puck
	}
	return nil
}

func (x *EntityState) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *EntityState) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPlaying  int32  `protobuf:"varint,1,opt,name=isPlaying,proto3" json:"isPlaying,omitempty"`
	ScoreTeam1 int32  `protobuf:"varint,2,opt,name=scoreTeam1,proto3" json:"scoreTeam1,omitempty"`
	ScoreTeam2 int32  `protobuf:"varint,3,opt,name=scoreTeam2,proto3" json:"scoreTeam2,omitempty"`
	RoomID     string `protobuf:"bytes,4,opt,name=RoomID,proto3" json:"RoomID,omitempty"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{3}
}

func (x *GameState) GetIsPlaying() int32 {
	if x != nil {
		return x.IsPlaying
	}
	return 0
}

func (x *GameState) GetScoreTeam1() int32 {
	if x != nil {
		return x.ScoreTeam1
	}
	return 0
}

func (x *GameState) GetScoreTeam2() int32 {
	if x != nil {
		return x.ScoreTeam2
	}
	return 0
}

func (x *GameState) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

type LeaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID     string      `protobuf:"bytes,1,opt,name=RoomID,proto3" json:"RoomID,omitempty"`
	PlayerInfo *PlayerInfo `protobuf:"bytes,2,opt,name=playerInfo,proto3" json:"playerInfo,omitempty"`
}

func (x *LeaveRequest) Reset() {
	*x = LeaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveRequest) ProtoMessage() {}

func (x *LeaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveRequest.ProtoReflect.Descriptor instead.
func (*LeaveRequest) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{4}
}

func (x *LeaveRequest) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *LeaveRequest) GetPlayerInfo() *PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID     string      `protobuf:"bytes,1,opt,name=RoomID,proto3" json:"RoomID,omitempty"`
	PlayerInfo *PlayerInfo `protobuf:"bytes,2,opt,name=playerInfo,proto3" json:"playerInfo,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{5}
}

func (x *JoinRequest) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *JoinRequest) GetPlayerInfo() *PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type NewGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfPlayer int32  `protobuf:"varint,1,opt,name=numberOfPlayer,proto3" json:"numberOfPlayer,omitempty"`
	TargetScore    int32  `protobuf:"varint,2,opt,name=targetScore,proto3" json:"targetScore,omitempty"`
	Host           string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *NewGameInfo) Reset() {
	*x = NewGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewGameInfo) ProtoMessage() {}

func (x *NewGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewGameInfo.ProtoReflect.Descriptor instead.
func (*NewGameInfo) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{6}
}

func (x *NewGameInfo) GetNumberOfPlayer() int32 {
	if x != nil {
		return x.NumberOfPlayer
	}
	return 0
}

func (x *NewGameInfo) GetTargetScore() int32 {
	if x != nil {
		return x.TargetScore
	}
	return 0
}

func (x *NewGameInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type RoomID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueID string `protobuf:"bytes,1,opt,name=uniqueID,proto3" json:"uniqueID,omitempty"`
}

func (x *RoomID) Reset() {
	*x = RoomID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomID) ProtoMessage() {}

func (x *RoomID) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomID.ProtoReflect.Descriptor instead.
func (*RoomID) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{7}
}

func (x *RoomID) GetUniqueID() string {
	if x != nil {
		return x.UniqueID
	}
	return ""
}

type ObjectState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X  float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y  float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z  float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	Vx float32 `protobuf:"fixed32,4,opt,name=vx,proto3" json:"vx,omitempty"`
	Vy float32 `protobuf:"fixed32,5,opt,name=vy,proto3" json:"vy,omitempty"`
	Vz float32 `protobuf:"fixed32,6,opt,name=vz,proto3" json:"vz,omitempty"`
}

func (x *ObjectState) Reset() {
	*x = ObjectState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectState) ProtoMessage() {}

func (x *ObjectState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectState.ProtoReflect.Descriptor instead.
func (*ObjectState) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{8}
}

func (x *ObjectState) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ObjectState) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ObjectState) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *ObjectState) GetVx() float32 {
	if x != nil {
		return x.Vx
	}
	return 0
}

func (x *ObjectState) GetVy() float32 {
	if x != nil {
		return x.Vy
	}
	return 0
}

func (x *ObjectState) GetVz() float32 {
	if x != nil {
		return x.Vz
	}
	return 0
}

type Direction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UP    bool `protobuf:"varint,1,opt,name=UP,proto3" json:"UP,omitempty"`
	DOWN  bool `protobuf:"varint,2,opt,name=DOWN,proto3" json:"DOWN,omitempty"`
	LEFT  bool `protobuf:"varint,3,opt,name=LEFT,proto3" json:"LEFT,omitempty"`
	RIGHT bool `protobuf:"varint,4,opt,name=RIGHT,proto3" json:"RIGHT,omitempty"`
}

func (x *Direction) Reset() {
	*x = Direction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Direction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Direction) ProtoMessage() {}

func (x *Direction) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Direction.ProtoReflect.Descriptor instead.
func (*Direction) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{9}
}

func (x *Direction) GetUP() bool {
	if x != nil {
		return x.UP
	}
	return false
}

func (x *Direction) GetDOWN() bool {
	if x != nil {
		return x.DOWN
	}
	return false
}

func (x *Direction) GetLEFT() bool {
	if x != nil {
		return x.LEFT
	}
	return false
}

func (x *Direction) GetRIGHT() bool {
	if x != nil {
		return x.RIGHT
	}
	return false
}

type NewPlayerName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NewPlayerName) Reset() {
	*x = NewPlayerName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPlayerName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPlayerName) ProtoMessage() {}

func (x *NewPlayerName) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPlayerName.ProtoReflect.Descriptor instead.
func (*NewPlayerName) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{10}
}

func (x *NewPlayerName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type PlayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []string `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *PlayerList) Reset() {
	*x = PlayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerList) ProtoMessage() {}

func (x *PlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerList.ProtoReflect.Descriptor instead.
func (*PlayerList) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{12}
}

func (x *PlayerList) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_airHockey_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_pb_airHockey_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_pb_airHockey_proto_rawDescGZIP(), []int{13}
}

var File_pb_airHockey_proto protoreflect.FileDescriptor

var file_pb_airHockey_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x62, 0x2f, 0x61, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x41, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x22,
	0x87, 0x02, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3a, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x41, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x69, 0x72,
	0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41,
	0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x69,
	0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0x9b, 0x01, 0x0a,
	0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x41, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2a,
	0x0a, 0x04, 0x70, 0x75, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41,
	0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x70, 0x75, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0x5d,
	0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x69, 0x72,
	0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a,
	0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x69, 0x72, 0x48, 0x6f,
	0x63, 0x6b, 0x65, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x0b, 0x4e,
	0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x44, 0x22, 0x67,
	0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x02, 0x76, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x02, 0x76, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x7a, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x02, 0x76, 0x7a, 0x22, 0x59, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x55, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x55, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x12, 0x14, 0x0a, 0x05,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x22, 0x23, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x26, 0x0a,
	0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xfc,
	0x02, 0x0a, 0x10, 0x41, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x18,
	0x2e, 0x41, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x15, 0x2e, 0x41, 0x69, 0x72, 0x48, 0x6f,
	0x63, 0x6b, 0x65, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x36, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x2e, 0x41,
	0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x41, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x08, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x2e, 0x41, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65,
	0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x41, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x16, 0x2e, 0x41, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x41, 0x69, 0x72, 0x48, 0x6f,
	0x63, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x41, 0x69, 0x72, 0x48, 0x6f, 0x63,
	0x6b, 0x65, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x41, 0x69, 0x72, 0x48,
	0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x12, 0x17, 0x2e, 0x41, 0x69, 0x72, 0x48, 0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x41, 0x69, 0x72, 0x48,
	0x6f, 0x63, 0x6b, 0x65, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x05, 0x5a,
	0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_airHockey_proto_rawDescOnce sync.Once
	file_pb_airHockey_proto_rawDescData = file_pb_airHockey_proto_rawDesc
)

func file_pb_airHockey_proto_rawDescGZIP() []byte {
	file_pb_airHockey_proto_rawDescOnce.Do(func() {
		file_pb_airHockey_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_airHockey_proto_rawDescData)
	})
	return file_pb_airHockey_proto_rawDescData
}

var file_pb_airHockey_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_pb_airHockey_proto_goTypes = []interface{}{
	(*GameMessage)(nil),   // 0: AirHockey.GameMessage
	(*PlayerInput)(nil),   // 1: AirHockey.PlayerInput
	(*EntityState)(nil),   // 2: AirHockey.EntityState
	(*GameState)(nil),     // 3: AirHockey.GameState
	(*LeaveRequest)(nil),  // 4: AirHockey.LeaveRequest
	(*JoinRequest)(nil),   // 5: AirHockey.JoinRequest
	(*NewGameInfo)(nil),   // 6: AirHockey.NewGameInfo
	(*RoomID)(nil),        // 7: AirHockey.RoomID
	(*ObjectState)(nil),   // 8: AirHockey.ObjectState
	(*Direction)(nil),     // 9: AirHockey.Direction
	(*NewPlayerName)(nil), // 10: AirHockey.NewPlayerName
	(*PlayerInfo)(nil),    // 11: AirHockey.PlayerInfo
	(*PlayerList)(nil),    // 12: AirHockey.PlayerList
	(*Empty)(nil),         // 13: AirHockey.Empty
}
var file_pb_airHockey_proto_depIdxs = []int32{
	1,  // 0: AirHockey.GameMessage.playerInput:type_name -> AirHockey.PlayerInput
	2,  // 1: AirHockey.GameMessage.entityState:type_name -> AirHockey.EntityState
	3,  // 2: AirHockey.GameMessage.gameState:type_name -> AirHockey.GameState
	13, // 3: AirHockey.GameMessage.empty:type_name -> AirHockey.Empty
	9,  // 4: AirHockey.PlayerInput.direction:type_name -> AirHockey.Direction
	8,  // 5: AirHockey.EntityState.players:type_name -> AirHockey.ObjectState
	8,  // 6: AirHockey.EntityState.puck:type_name -> AirHockey.ObjectState
	11, // 7: AirHockey.LeaveRequest.playerInfo:type_name -> AirHockey.PlayerInfo
	11, // 8: AirHockey.JoinRequest.playerInfo:type_name -> AirHockey.PlayerInfo
	10, // 9: AirHockey.AirHockeyService.Connect:input_type -> AirHockey.NewPlayerName
	6,  // 10: AirHockey.AirHockeyService.NewRoom:input_type -> AirHockey.NewGameInfo
	5,  // 11: AirHockey.AirHockeyService.JoinRoom:input_type -> AirHockey.JoinRequest
	0,  // 12: AirHockey.AirHockeyService.GameStream:input_type -> AirHockey.GameMessage
	13, // 13: AirHockey.AirHockeyService.GetPlayerList:input_type -> AirHockey.Empty
	4,  // 14: AirHockey.AirHockeyService.Disconnect:input_type -> AirHockey.LeaveRequest
	11, // 15: AirHockey.AirHockeyService.Connect:output_type -> AirHockey.PlayerInfo
	7,  // 16: AirHockey.AirHockeyService.NewRoom:output_type -> AirHockey.RoomID
	7,  // 17: AirHockey.AirHockeyService.JoinRoom:output_type -> AirHockey.RoomID
	0,  // 18: AirHockey.AirHockeyService.GameStream:output_type -> AirHockey.GameMessage
	12, // 19: AirHockey.AirHockeyService.GetPlayerList:output_type -> AirHockey.PlayerList
	13, // 20: AirHockey.AirHockeyService.Disconnect:output_type -> AirHockey.Empty
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_pb_airHockey_proto_init() }
func file_pb_airHockey_proto_init() {
	if File_pb_airHockey_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_airHockey_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Direction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPlayerName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_airHockey_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_airHockey_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GameMessage_PlayerInput)(nil),
		(*GameMessage_EntityState)(nil),
		(*GameMessage_GameState)(nil),
		(*GameMessage_Empty)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_airHockey_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_airHockey_proto_goTypes,
		DependencyIndexes: file_pb_airHockey_proto_depIdxs,
		MessageInfos:      file_pb_airHockey_proto_msgTypes,
	}.Build()
	File_pb_airHockey_proto = out.File
	file_pb_airHockey_proto_rawDesc = nil
	file_pb_airHockey_proto_goTypes = nil
	file_pb_airHockey_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AirHockeyServiceClient is the client API for AirHockeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AirHockeyServiceClient interface {
	// waiting list
	Connect(ctx context.Context, in *NewPlayerName, opts ...grpc.CallOption) (*PlayerInfo, error)
	// host and player in room + start -> play game
	NewRoom(ctx context.Context, in *NewGameInfo, opts ...grpc.CallOption) (*RoomID, error)
	JoinRoom(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*RoomID, error)
	// in game stream actions
	GameStream(ctx context.Context, opts ...grpc.CallOption) (AirHockeyService_GameStreamClient, error)
	// optional functions for player
	GetPlayerList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlayerList, error)
	//  rpc LeaveRoom(LeaveRequest) returns (Empty) {};
	Disconnect(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*Empty, error)
}

type airHockeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirHockeyServiceClient(cc grpc.ClientConnInterface) AirHockeyServiceClient {
	return &airHockeyServiceClient{cc}
}

func (c *airHockeyServiceClient) Connect(ctx context.Context, in *NewPlayerName, opts ...grpc.CallOption) (*PlayerInfo, error) {
	out := new(PlayerInfo)
	err := c.cc.Invoke(ctx, "/AirHockey.AirHockeyService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airHockeyServiceClient) NewRoom(ctx context.Context, in *NewGameInfo, opts ...grpc.CallOption) (*RoomID, error) {
	out := new(RoomID)
	err := c.cc.Invoke(ctx, "/AirHockey.AirHockeyService/NewRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airHockeyServiceClient) JoinRoom(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*RoomID, error) {
	out := new(RoomID)
	err := c.cc.Invoke(ctx, "/AirHockey.AirHockeyService/JoinRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airHockeyServiceClient) GameStream(ctx context.Context, opts ...grpc.CallOption) (AirHockeyService_GameStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AirHockeyService_serviceDesc.Streams[0], "/AirHockey.AirHockeyService/GameStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &airHockeyServiceGameStreamClient{stream}
	return x, nil
}

type AirHockeyService_GameStreamClient interface {
	Send(*GameMessage) error
	Recv() (*GameMessage, error)
	grpc.ClientStream
}

type airHockeyServiceGameStreamClient struct {
	grpc.ClientStream
}

func (x *airHockeyServiceGameStreamClient) Send(m *GameMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *airHockeyServiceGameStreamClient) Recv() (*GameMessage, error) {
	m := new(GameMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *airHockeyServiceClient) GetPlayerList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlayerList, error) {
	out := new(PlayerList)
	err := c.cc.Invoke(ctx, "/AirHockey.AirHockeyService/GetPlayerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airHockeyServiceClient) Disconnect(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AirHockey.AirHockeyService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirHockeyServiceServer is the server API for AirHockeyService service.
type AirHockeyServiceServer interface {
	// waiting list
	Connect(context.Context, *NewPlayerName) (*PlayerInfo, error)
	// host and player in room + start -> play game
	NewRoom(context.Context, *NewGameInfo) (*RoomID, error)
	JoinRoom(context.Context, *JoinRequest) (*RoomID, error)
	// in game stream actions
	GameStream(AirHockeyService_GameStreamServer) error
	// optional functions for player
	GetPlayerList(context.Context, *Empty) (*PlayerList, error)
	//  rpc LeaveRoom(LeaveRequest) returns (Empty) {};
	Disconnect(context.Context, *LeaveRequest) (*Empty, error)
}

// UnimplementedAirHockeyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAirHockeyServiceServer struct {
}

func (*UnimplementedAirHockeyServiceServer) Connect(context.Context, *NewPlayerName) (*PlayerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedAirHockeyServiceServer) NewRoom(context.Context, *NewGameInfo) (*RoomID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRoom not implemented")
}
func (*UnimplementedAirHockeyServiceServer) JoinRoom(context.Context, *JoinRequest) (*RoomID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (*UnimplementedAirHockeyServiceServer) GameStream(AirHockeyService_GameStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GameStream not implemented")
}
func (*UnimplementedAirHockeyServiceServer) GetPlayerList(context.Context, *Empty) (*PlayerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerList not implemented")
}
func (*UnimplementedAirHockeyServiceServer) Disconnect(context.Context, *LeaveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}

func RegisterAirHockeyServiceServer(s *grpc.Server, srv AirHockeyServiceServer) {
	s.RegisterService(&_AirHockeyService_serviceDesc, srv)
}

func _AirHockeyService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPlayerName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirHockeyServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AirHockey.AirHockeyService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirHockeyServiceServer).Connect(ctx, req.(*NewPlayerName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirHockeyService_NewRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGameInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirHockeyServiceServer).NewRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AirHockey.AirHockeyService/NewRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirHockeyServiceServer).NewRoom(ctx, req.(*NewGameInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirHockeyService_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirHockeyServiceServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AirHockey.AirHockeyService/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirHockeyServiceServer).JoinRoom(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirHockeyService_GameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AirHockeyServiceServer).GameStream(&airHockeyServiceGameStreamServer{stream})
}

type AirHockeyService_GameStreamServer interface {
	Send(*GameMessage) error
	Recv() (*GameMessage, error)
	grpc.ServerStream
}

type airHockeyServiceGameStreamServer struct {
	grpc.ServerStream
}

func (x *airHockeyServiceGameStreamServer) Send(m *GameMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *airHockeyServiceGameStreamServer) Recv() (*GameMessage, error) {
	m := new(GameMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AirHockeyService_GetPlayerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirHockeyServiceServer).GetPlayerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AirHockey.AirHockeyService/GetPlayerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirHockeyServiceServer).GetPlayerList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirHockeyService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirHockeyServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AirHockey.AirHockeyService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirHockeyServiceServer).Disconnect(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AirHockeyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AirHockey.AirHockeyService",
	HandlerType: (*AirHockeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _AirHockeyService_Connect_Handler,
		},
		{
			MethodName: "NewRoom",
			Handler:    _AirHockeyService_NewRoom_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _AirHockeyService_JoinRoom_Handler,
		},
		{
			MethodName: "GetPlayerList",
			Handler:    _AirHockeyService_GetPlayerList_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _AirHockeyService_Disconnect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GameStream",
			Handler:       _AirHockeyService_GameStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/airHockey.proto",
}
